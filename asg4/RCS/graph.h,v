head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2013.05.27.21.07.31;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.27.18.54.23;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.27.17.29.31;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.05.22.18.36.40;	author -;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@#ifndef __GRAPH__H
#define __GRAPH__H
#include "list.h"
typedef struct graph *GraphRef;
/*pre: n!=0 post: new graph with n nodes*/
GraphRef newGraph(int n);

/*pre: from and to are nodes in g post: edge (from, to)*/
void addEdge(GraphRef g, int from, int to);

/*pre: g!=NULL post: dist and path updated*/
void doBFS(GraphRef g, int source);

/*pre: doBFS called*/
int getDistance(GraphRef g, int destination);

/*pre: doBFS called*/
ListRef getPathTo(GraphRef g, int destination);

/*pre: g!=NULL*/
void freeGraph(GraphRef g);

/*for debugging*/
void printGraph(GraphRef g);
#endif
@


1.3
log
@-
@
text
@d23 1
a23 2
void printPath(GraphRef g, int dest);

@


1.2
log
@-
@
text
@d25 1
a25 1

@


1.1
log
@-
@
text
@d23 2
@
