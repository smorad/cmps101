head	1.6;
access;
symbols;
locks;
comment	@ * @;


1.6
date	2013.05.27.23.36.38;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.05.27.23.36.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.05.27.23.35.47;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.27.23.35.26;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.27.23.34.24;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.05.27.23.28.47;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@//smorad@@ucsc.edu
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include "list.h"
ListRef L; 
void extraTests(){
	L=newList();
	printf("is empty: %d\n", isEmpty(L));
	printf("off end: %d\n", offEnd(L));
	printf("at first is: %d\n", atFirst(L));
	printf("at last is: %d\n", atLast(L));

	insertBeforeFirst(L, 0);
	printList( L);

	insertAfterLast(L,1);
	printList( L);

	insertAfterCurrent(L,5);
	printList( L);

	insertBeforeCurrent(L,10);
	printList( L);
	
	moveLast(L);
	printList( L);

	moveFirst(L);
	printList( L);

	moveNext(L);
	printList( L);
	
	movePrev(L);
	printList( L);
	

	moveNext(L);
	deleteFirst(L);
	printList( L);
	
	deleteLast(L);
	printList( L);
	
	deleteCurrent(L);
	printList( L);

	printf("inserting 50 before current\n");	
	insertBeforeCurrent(L, 50);
	printf("get first: %d\n", getFirst(L));
	printf("get last: %d\n", getLast(L));
	printf("get current: %d\n", getCurrent(L));
	printf("length: %d\n", getLength(L));
	makeEmpty(L);
	freeList(L);
	 
}	

int main(){
	extraTests();
	ListRef l=newList();
	insertionSort(l, 5);
	insertionSort(l, 4);
	insertionSort(l, 3);
	insertionSort(l, 5);
	printList(l);
	insertionSort(l, 3);
	insertionSort(l, 3);
	printList(l);
	makeEmpty(l);
	freeList(l);
}
@


1.5
log
@-
@
text
@d49 1
a49 1
	printf("inserting 50 before current");	
@


1.4
log
@-
@
text
@d49 1
a49 1
	
@


1.3
log
@-
@
text
@a52 1
	moveFirst(L);
@


1.2
log
@-
@
text
@d53 1
a53 1
	moveNext(L);
@


1.1
log
@-
@
text
@d5 1
a5 1
#include "bookCountList.h"
d51 2
a52 2
	printf("get first: %lu\n", getFirst(L));
	printf("get last: %lu\n", getLast(L));
d54 1
a54 1
	printf("get current: %lu\n", getCurrent(L));
d63 1
a63 1
	ListRef l=newList(1);
@
