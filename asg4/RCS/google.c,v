head	1.56;
access;
symbols;
locks;
comment	@ * @;


1.56
date	2013.05.27.21.07.31;	author -;	state -;
branches;
next	1.55;

1.55
date	2013.05.27.20.51.28;	author -;	state -;
branches;
next	1.54;

1.54
date	2013.05.27.20.43.30;	author -;	state -;
branches;
next	1.53;

1.53
date	2013.05.27.20.32.27;	author -;	state -;
branches;
next	1.52;

1.52
date	2013.05.27.20.31.57;	author -;	state -;
branches;
next	1.51;

1.51
date	2013.05.27.20.27.29;	author -;	state -;
branches;
next	1.50;

1.50
date	2013.05.27.20.18.50;	author -;	state -;
branches;
next	1.49;

1.49
date	2013.05.27.20.11.34;	author -;	state -;
branches;
next	1.48;

1.48
date	2013.05.27.20.10.23;	author -;	state -;
branches;
next	1.47;

1.47
date	2013.05.27.18.54.04;	author -;	state -;
branches;
next	1.46;

1.46
date	2013.05.27.18.53.36;	author -;	state -;
branches;
next	1.45;

1.45
date	2013.05.27.18.50.32;	author -;	state -;
branches;
next	1.44;

1.44
date	2013.05.27.18.50.12;	author -;	state -;
branches;
next	1.43;

1.43
date	2013.05.27.18.49.47;	author -;	state -;
branches;
next	1.42;

1.42
date	2013.05.27.18.49.26;	author -;	state -;
branches;
next	1.41;

1.41
date	2013.05.27.18.48.39;	author -;	state -;
branches;
next	1.40;

1.40
date	2013.05.27.18.47.55;	author -;	state -;
branches;
next	1.39;

1.39
date	2013.05.27.18.47.32;	author -;	state -;
branches;
next	1.38;

1.38
date	2013.05.27.18.46.55;	author -;	state -;
branches;
next	1.37;

1.37
date	2013.05.27.18.45.32;	author -;	state -;
branches;
next	1.36;

1.36
date	2013.05.27.18.45.14;	author -;	state -;
branches;
next	1.35;

1.35
date	2013.05.27.18.45.02;	author -;	state -;
branches;
next	1.34;

1.34
date	2013.05.27.18.38.08;	author -;	state -;
branches;
next	1.33;

1.33
date	2013.05.27.18.36.15;	author -;	state -;
branches;
next	1.32;

1.32
date	2013.05.27.18.34.12;	author -;	state -;
branches;
next	1.31;

1.31
date	2013.05.27.18.33.36;	author -;	state -;
branches;
next	1.30;

1.30
date	2013.05.27.18.31.51;	author -;	state -;
branches;
next	1.29;

1.29
date	2013.05.27.18.31.28;	author -;	state -;
branches;
next	1.28;

1.28
date	2013.05.27.18.28.18;	author -;	state -;
branches;
next	1.27;

1.27
date	2013.05.27.18.24.50;	author -;	state -;
branches;
next	1.26;

1.26
date	2013.05.27.18.24.42;	author -;	state -;
branches;
next	1.25;

1.25
date	2013.05.27.18.24.21;	author -;	state -;
branches;
next	1.24;

1.24
date	2013.05.27.18.15.30;	author -;	state -;
branches;
next	1.23;

1.23
date	2013.05.27.18.14.38;	author -;	state -;
branches;
next	1.22;

1.22
date	2013.05.27.18.09.15;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.05.27.18.08.32;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.05.27.18.07.29;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.05.27.18.06.49;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.05.27.18.04.53;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.05.27.18.04.44;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.05.27.18.03.37;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.05.27.18.00.11;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.05.27.17.59.38;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.05.27.17.59.19;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.05.27.17.43.14;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.05.27.17.42.09;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.05.27.17.34.14;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.05.27.17.33.31;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.05.27.17.33.09;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.05.27.17.22.33;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.05.25.19.34.10;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.05.25.19.21.16;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.05.25.19.19.08;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.25.19.17.41;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.25.19.07.15;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.05.22.18.36.40;	author -;	state -;
branches;
next	;


desc
@@


1.56
log
@-
@
text
@#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include "graph.h"
#include "list.h"

/*Global graph is better than passing pointers to g in every function*/
GraphRef g;

/*Reads input and creates vertices then adds edges*/
void constructGraph(FILE* f, int numVerts){
	for(int i=0; i<numVerts; i++){
		int vertex;
		char edgesBuffer[1024];
		fscanf(f, "%d", &vertex);
		fgets(edgesBuffer, 1024, f);
		char* edge = strtok(edgesBuffer, " \n");
		while(edge!=NULL){
			addEdge(g, vertex, atoi(edge));
			edge = strtok(NULL, " \n");
		}
		
	}
}

/*Read in paths to display, then prints paths*/
void findPath(FILE* f,int numQueries){
	int source, dest;
	for(int i=0; i<numQueries; i++){
		fscanf(f, "%d", &source);
		fscanf(f, "%d", &dest);
		doBFS(g, source);
		int dist = getDistance(g, dest);
		if(dist==INT_MAX)
			printf("No path from %d to %d.\n", source, dest);
		else{
			printf("To get from %d to %d requires %d edges. ", source, dest, dist);
			ListRef path = getPathTo(g, dest);
			printList(path);
			makeEmpty(path);
			freeList(path);
		}
	}

}

/*Constructs graph then finds path*/
void readInput(FILE* f){
	int numVerts, numQueries;
	fscanf(f, "%d", &numVerts);
	g = newGraph(numVerts);
	fscanf(f, "%d", &numQueries);
	constructGraph(f, numVerts);
	findPath(f, numQueries);
}

/*Entry point*/
int main(int argc, char** argv){
	FILE *f = fopen(argv[1], "r");
	if(f==NULL){
		printf("File not found.\n");
		exit(EXIT_FAILURE);
	}
	readInput(f);
	fclose(f);
	freeGraph(g);
	return EXIT_SUCCESS;
}
@


1.55
log
@-
@
text
@d8 1
d11 1
d13 11
a23 14
	//g = newGraph(numVerts);
for(int i=0; i<numVerts; i++){
	//g = newGraph(numVerts);
	int vertex;
	char edgesBuffer[1024];
	fscanf(f, "%d", &vertex);
	fgets(edgesBuffer, 1024, f);
//	printf("vertex: %d edgebuffer: %s\n",vertex, edgesBuffer);
	char* edge = strtok(edgesBuffer, " \n");
	while(edge!=NULL){
		//if(tmp==NULL) break;
//		printf("At vertex %d adding %d\n", vertex, atoi(edge));
		addEdge(g, vertex, atoi(edge));
		edge = strtok(NULL, " \n");
a24 2
		
}
d27 1
a32 1
	//	printf("source %d dest %d \n", source, dest);
d48 1
a49 1
	//printf("readinput called\n\n");
d58 1
a58 1

@


1.54
log
@-
@
text
@d44 2
@


1.53
log
@-
@
text
@d68 1
@


1.52
log
@-
@
text
@a43 1
			printf("\n");
@


1.51
log
@-
@
text
@d41 1
a41 1
			printf("To get from %d to %d requires %d edges.", source, dest, dist);
d44 1
a44 1
			//printPath(g, dest);
@


1.50
log
@-
@
text
@d42 3
a44 3
			//ListRef path = getPathTo(g, dest);
			//printList(path);
			printPath(g, dest);
@


1.49
log
@-
@
text
@a67 1
	printGraph(g);
@


1.48
log
@-
@
text
@d41 1
a41 1
			printf("To get from %d to %d requires %d edges. Follow the path ", source, dest, dist);
@


1.47
log
@-
@
text
@d42 3
a44 3
			ListRef path = getPathTo(g, dest);
			printList(path);
			//printPath(g, dest);
@


1.46
log
@-
@
text
@d68 1
@


1.45
log
@-
@
text
@d42 3
a44 3
			//ListRef path = getPathTo(g, dest);
			//printList(path);
			printPath(g, dest);
@


1.44
log
@-
@
text
@d42 3
a44 3
			ListRef path = getPathTo(g, dest);
			printList(path);
		//	printPath(g, dest);
@


1.43
log
@-
@
text
@d39 1
a39 1
			printf("No path from %d to %d.", source, dest);
d41 1
a41 1
			printf("To get from %d to %d requires %d edges.\n Follow the path ", source, dest, dist);
@


1.42
log
@-
@
text
@d39 1
a39 1
			printf("No path from %d to %d.\n", source, dest);
@


1.41
log
@-
@
text
@d18 1
a18 1
	printf("vertex: %d edgebuffer: %s\n",vertex, edgesBuffer);
d22 1
a22 1
		printf("At vertex %d adding %d\n", vertex, atoi(edge));
@


1.40
log
@-
@
text
@d12 1
a12 1
for(int i=0; i<numVerts-1; i++){
@


1.39
log
@-
@
text
@d35 1
a35 1
		printf("source %d dest %d \n", source, dest);
@


1.38
log
@-
@
text
@d12 1
a12 1
for(int i=0; i<numVerts; i++){
@


1.37
log
@-
@
text
@d35 1
@


1.36
log
@-
@
text
@d24 1
a24 1
		edge = strtok(NULL, " ");
@


1.35
log
@-
@
text
@a24 1
		if(edge=="\n") break;
@


1.34
log
@-
@
text
@d19 1
a19 1
	char* edge = strtok(edgesBuffer, " ");
@


1.33
log
@-
@
text
@a19 2
	if(edge!=NULL)
		addEdge(g, vertex, atoi(edge));
a21 1
		edge = strtok(NULL, " ");
d24 2
@


1.32
log
@-
@
text
@d20 2
d24 1
a26 1
		edge = strtok(NULL, " ");
@


1.31
log
@-
@
text
@d18 1
a18 1
	printf("edgebuffer: %s\n", edgesBuffer);
@


1.30
log
@-
@
text
@d14 1
a14 1
	int vertex, throw;
a16 1
	fscanf(f, "%d", &throw);
@


1.29
log
@-
@
text
@d19 1
a19 1
//	printf("edgebuffer: %s\n", edgesBuffer);
d23 1
a23 1
		//printf("At vertex %d adding %d\n", vertex, atoi(edge));
@


1.28
log
@-
@
text
@d14 1
a14 1
	int vertex;
d17 1
d41 4
a44 4
		//	printf("To get from %d to %d requires %d edges.\n Follow the path ", source, dest, dist);
		//	ListRef path = getPathTo(g, dest);
		//	printList(path);
			printPath(g, dest);
@


1.27
log
@-
@
text
@d40 4
a43 4
			printf("To get from %d to %d requires %d edges.\n Follow the path ", source, dest, dist);
			ListRef path = getPathTo(g, dest);
			printList(path);
		//	printPath(g, dest);
@


1.26
log
@-
@
text
@d19 1
a19 1
	int edge = strtok(edgesBuffer, " ");
@


1.25
log
@-
@
text
@d19 1
a19 1
	int edge = atoi(strtok(edgesBuffer, " "));
d23 2
a24 2
		addEdge(g, vertex, edge);
		edge = atoi(strtok(NULL, " "));
@


1.24
log
@-
@
text
@d19 1
a19 1
	char* edge = strtok(edgesBuffer, " ");
d23 2
a24 2
		addEdge(g, vertex, atoi(edge));
		edge = strtok(NULL, " ");
@


1.23
log
@-
@
text
@d41 3
a43 3
			//ListRef path = getPathTo(g, dest);
			//printList(path);
			printPath(g, dest);
@


1.22
log
@-
@
text
@d13 1
a13 1
	g = newGraph(numVerts);
d50 1
a50 1
	printf("readinput called\n\n");
d53 1
a53 1
	//g = newGraph(numVerts);
@


1.21
log
@-
@
text
@d41 3
a43 2
			ListRef path = getPathTo(g, dest);
			printList(path);
@


1.20
log
@-
@
text
@d13 1
d52 1
a52 1
	g = newGraph(numVerts);
@


1.19
log
@-
@
text
@d17 1
a17 1
	printf("edgebuffer: %s\n", edgesBuffer);
d21 1
a21 1
		printf("At vertex %d adding %d\n", vertex, atoi(edge));
@


1.18
log
@-
@
text
@d48 1
@


1.17
log
@-
@
text
@d11 1
a11 1
	g = newGraph(numVerts);
@


1.16
log
@-
@
text
@d50 1
@


1.15
log
@-
@
text
@d11 1
a14 1
	g = newGraph(numVerts);
d51 1
a51 1
	constructGraph(f, numVerts+1);
@


1.14
log
@-
@
text
@d51 1
a51 1
	constructGraph(f, numVerts);
@


1.13
log
@-
@
text
@d51 1
a51 1
	constructGraph(f, numVerts+1);
@


1.12
log
@-
@
text
@d51 1
a51 1
	constructGraph(f, numVerts);
@


1.11
log
@-
@
text
@d17 1
a17 1
	printf("edgebuffer: %c\n", edgesBuffer);
@


1.10
log
@-
@
text
@d17 1
@


1.9
log
@-
@
text
@d20 1
a20 1
		printf("Adding edge %d to %d\n", atoi(edge), vertex);
@


1.8
log
@-
@
text
@d20 1
a20 1
		printf("Adding edge %d to %d", atoi(edge), vertex);
@


1.7
log
@-
@
text
@d20 1
@


1.6
log
@-
@
text
@d36 5
a40 2
		else
			printf("To get from %d to %d requires %d edges.\n", source, dest, dist);
@


1.5
log
@-
@
text
@d4 1
d8 1
d10 1
a10 2

void constructGraph(FILE* f, int numVerts, int numQueries){
d14 1
a14 1
	GraphRef g = newGraph(numVerts);
d27 15
d46 2
a47 1
	constructGraph(f, numVerts, numQueries);
@


1.4
log
@-
@
text
@d12 1
a12 1
	char* edges;
d15 2
a16 2
	fgets(edges, 1024, f);
	char* edge = strtok(edges, " ");
@


1.3
log
@-
@
text
@d16 1
a16 1
	int edge = strtok(edges, " ");
d18 3
a20 3
		char* tmp = strtok(NULL, " ");
		if(tmp==NULL) break;
		addEdge(g, vertex, atoi(tmp));
@


1.2
log
@-
@
text
@d15 1
a15 1
	getline(edges, 1024, f);
d37 1
a37 1
		printf("File not found.");
@


1.1
log
@-
@
text
@d3 3
d7 36
a42 2
int main(){
	return;
@
