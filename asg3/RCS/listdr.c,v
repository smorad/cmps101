head	1.6;
access;
symbols;
locks;
comment	@ * @;


1.6
date	2013.05.19.23.23.34;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.05.19.20.19.24;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.05.14.05.03.54;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.05.14.05.03.30;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.05.13.03.12.15;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.05.12.19.12.50;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@//smorad@@ucsc.edu
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include "bookCountList.h"
ListRef L; 
void extraTests(){
	L=newList();
	printf("is empty: %d\n", isEmpty(L));
	printf("off end: %d\n", offEnd(L));
	printf("at first is: %d\n", atFirst(L));
	printf("at last is: %d\n", atLast(L));

	insertBeforeFirst(L, 0);
	printList( L);

	insertAfterLast(L,1);
	printList( L);

	insertAfterCurrent(L,5);
	printList( L);

	insertBeforeCurrent(L,10);
	printList( L);
	
	moveLast(L);
	printList( L);

	moveFirst(L);
	printList( L);

	moveNext(L);
	printList( L);
	
	movePrev(L);
	printList( L);
	

	moveNext(L);
	deleteFirst(L);
	printList( L);
	
	deleteLast(L);
	printList( L);
	
	deleteCurrent(L);
	printList( L);

	
	insertBeforeCurrent(L, 50);
	printf("get first: %lu\n", getFirst(L));
	printf("get last: %lu\n", getLast(L));
	moveNext(L);
	printf("get current: %lu\n", getCurrent(L));
	printf("length: %d\n", getLength(L));
//	printf("equals: %d", equals(L, newList));
	makeEmpty(L);
	freeList(L);
	 
}	

int main(){
	extraTests();
	ListRef l=newList(1);
	insertionSort(l, 5);
	insertionSort(l, 4);
	insertionSort(l, 3);
	insertionSort(l, 5);
	printList(l);
	insertionSort(l, 3);
	insertionSort(l, 3);
	printList(l);
	makeEmpty(l);
	freeList(l);
}
@


1.5
log
@-
@
text
@d56 1
a56 1
	printf("equals: %d", equals(L, newList));
@


1.4
log
@-
@
text
@d1 1
@


1.3
log
@-
@
text
@a36 2
	ListRef newList = copyList(L);
	printList( newList);
@


1.2
log
@-
@
text
@d6 1
a6 1
/*int main(){
d8 4
a11 4
	printf("is empty: %s\n", isEmpty(L));
	printf("off end: %s\n", offEnd(L));
	printf("at first is: %s\n", atFirst(L));
	printf("at last is: %s\n", atLast(L));
d14 1
a14 1
	printList(stdout, L);
d16 2
a17 2
	insertAfterLast(L,1)
	printList(stdout, L);
d19 2
a20 2
	insertAfterCurrent(L,5)	
	printList(stdout, L);
d23 1
a23 1
	printList(stdout, L);
d26 1
a26 1
	printList(stdout, L);
d29 1
a29 1
	printList(stdout, L);
d32 1
a32 1
	printList(stdout, L);
d35 1
a35 1
	printList(stdout, L);
d38 1
a38 1
	printList(stdout, newList);
d42 1
a42 1
	printList(stdout, L);
d45 1
a45 1
	printList(stdout, L);
d48 1
a48 1
	printList(stdout, L);
d58 2
d61 1
a61 1
}	*/
d64 1
d74 2
@


1.1
log
@-
@
text
@d62 1
a62 1
	ListRef l=newList();
@
