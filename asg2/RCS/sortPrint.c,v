head	1.22;
access;
symbols;
locks;
comment	@ * @;


1.22
date	2013.05.01.19.42.47;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.05.01.19.42.09;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.05.01.19.41.27;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.05.01.19.25.46;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.05.01.19.24.52;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.05.01.19.21.46;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.05.01.19.20.44;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.05.01.19.20.24;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.05.01.19.13.02;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.05.01.19.11.57;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.05.01.19.00.25;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.05.01.18.48.06;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.04.30.04.41.30;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.04.28.19.48.14;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.04.28.19.34.49;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.04.28.19.15.36;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.04.28.19.12.34;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.04.28.19.11.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.04.28.19.03.28;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.04.28.18.56.48;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.04.28.18.53.34;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.04.27.21.27.07;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@#include <stdio.h>
#include <stdlib.h>
#include "heap.h"
#include "heapSort.h"
#include "insertionSort.h"
int const HEAP_SIZE = 100000;
//typedef struct HeapHdr *heap;

void printSort(int* arr, int* arr2, int count){
	for(int i=0;i<count;i++){
		printf("InsSort:\t %d \t", arr[i]);
		printf("HeapSort: \t %d\n",arr2[i]);
		//deleteMax(h);
	}
}
void readFile(FILE *fp){
	int buff;
	int num = 0;
	int arr[HEAP_SIZE];
	int arr2[HEAP_SIZE];
	while(fscanf(fp,"%d", &buff)!=-1){
		arr[num] = buff;
		arr2[num]=buff;
		++num;
	}
	insertionSort(arr, num);
	heapSort(arr2, num);
	printSort(arr, arr2, num);
}

void openFile(char* file){
	FILE *fp = fopen(file, "r");
	if(fp==NULL){
		printf("Invalid filename\n");
		exit(1);
	}
	readFile(fp);
	fclose(fp);
	
}

int main(int argv, char** args){
	openFile(args[1]);
}
@


1.21
log
@-
@
text
@d34 1
a34 1
		printf("Invalid filename");
@


1.20
log
@-
@
text
@d33 4
a36 1
	if(fp==NULL) exit(1);
@


1.19
log
@-
@
text
@d33 1
@


1.18
log
@-
@
text
@a7 1
heap h;
a38 1
	h = newHeap(HEAP_SIZE);
a39 1
	delete(h);
@


1.17
log
@-
@
text
@d42 1
a42 1
	//delete(h);
@


1.16
log
@-
@
text
@d35 1
a35 1
	//fclose(fp);
d42 1
a42 1
	delete(h);
@


1.15
log
@-
@
text
@d35 1
a35 1
	fclose(fp);
d42 1
a42 1
	//delete(h);
@


1.14
log
@-
@
text
@d42 1
a42 1
	delete(h);
@


1.13
log
@-
@
text
@d35 1
a35 1
	//fclose(fp);
@


1.12
log
@-
@
text
@d35 1
a35 1
	fclose(fp);
@


1.11
log
@-
@
text
@d35 1
d42 1
@


1.10
log
@-
@
text
@d6 1
a6 1
int const HEAP_SIZE = 1000;
d20 2
a21 2
	int arr[1024];
	int arr2[1024];
@


1.9
log
@-
@
text
@d28 1
a28 1
	heapSort(arr, num);
@


1.8
log
@-
@
text
@d13 2
a14 2
		printf("HeapSort: \t %d\n",maxValue(h));
		deleteMax(h);
@


1.7
log
@-
@
text
@d12 3
a14 1
		printf("InsSort:\t %d \t HeapSort: \t %d\n",arr[i], arr2[i]);
@


1.6
log
@-
@
text
@d20 1
a20 1
	while(fscanf(fp,"%d", &buff)){
@


1.5
log
@-
@
text
@d31 1
a31 1
	FILE *fp = fopen(file, "w");
@


1.4
log
@-
@
text
@d5 1
d10 1
a10 1
void printSort(int* arr, int count){
d12 1
a12 2
		printf("InsSort:\t %d \t HeapSort: \t %d\n",arr[i], maxValue(h));
		deleteMax(h);
d19 1
a20 1
		insert(h, buff);
d22 1
d26 2
a27 1
	printSort(arr, num);
@


1.3
log
@-
@
text
@d8 7
d18 1
d21 1
d24 2
a25 1
	int arr[num];
@


1.2
log
@-
@
text
@d10 1
d13 1
d15 1
@


1.1
log
@-
@
text
@d23 1
a23 1
	openFile(args[0]);
@
